{"version":3,"sources":["components/Header/Header.js","components/Item/Item.js","components/MainPage/MainPage.js","components/ItemInfo/ItemInfo.js","components/App/App.js","serviceWorker.js","index.js"],"names":["AppHeader","className","Item","props","territory","libraries","order","key","to","type","size","MainPage","useState","data","setData","loading","setLoading","search","setSearch","filteredRegions","setFilteredRegions","sortOption","setSortOption","useEffect","axios","get","then","res","catch","err","console","log","filter","dataItem","toLowerCase","includes","placeholder","onChange","e","target","value","Group","name","checked","onClick","event","sort","a","b","Number","map","i","ItemInfo","useParams","filteredData","setFilteredData","item","title","formname","bordered","column","xxl","xl","lg","md","sm","xs","label","subscribers","employees","span","fullname","funds_budget","buildings_repair","period","address","id","App","Header","Layout","Content","Footer","style","minWidth","padding","margin","minHeight","exact","path","render","textAlign","Boolean","window","location","hostname","match","ReactDOM","locale","ruRU","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a2bfa578.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\n\nconst AppHeader = () => (\n  <div>\n    <h1 className=\"site-title\">Статистическая информация о библиотеках в России</h1>\n  </div>\n);\n\nexport default AppHeader;\n","import React from 'react';\nimport './Item.css';\nimport {Button} from \"antd\";\nimport {NavLink} from \"react-router-dom\";\n\n\nconst Item = props => {\n  const { territory, libraries, order} = props;\n\n    return (\n      <div className=\"Item\" key={order}>\n        <div className=\"Item-left\">\n          <div className=\"Item-territory\"><b>{territory}</b> - библиотек в городе {libraries} </div>\n        </div>\n\n        <div className=\"Item-right\">\n          <NavLink to={`/region-info/${order}`}>\n            <Button type=\"primary\" size=\"small\">Подробнее</Button>\n          </NavLink>\n        </div>\n      </div>\n    );\n\n}\n\nexport default Item;\n\n","import React, { useEffect, useState } from 'react';\nimport {Radio} from 'antd';\nimport '../MainPage/MainPage.css';\nimport axios from \"axios\";\nimport Item from \"../Item/Item\";\n\n\nfunction MainPage() {\n\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [search, setSearch] = useState(\"\");\n  const [filteredRegions, setFilteredRegions] = useState([]);\n  const [sortOption, setSortOption] = useState([\"\"]);\n\n  useEffect(() => {\n    setLoading(true);\n    axios\n      .get(\"https://cors-anywhere.herokuapp.com/https://data.gov.ru/opendata/7705851331-statlibrary/data-20161110T1744.json\")\n      .then(res => {\n        setData(res.data);\n        setLoading(false);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }, []);\n\n\n  useEffect(() => {\n    setFilteredRegions(\n      data.filter(dataItem =>\n        dataItem.territory.toLowerCase().includes(search.toLowerCase())\n      )\n    );\n  }, [search, data]);\n\n\n  function handleChangeRegionsAscend (event) {\n    setFilteredRegions(\n      data.sort((a, b) =>\n        Number(a.libraries) - Number(b.libraries))\n    );\n  }\n\n  function handleChangeRegionsDescend (event) {\n    setFilteredRegions(\n      data.sort((a, b) =>\n        Number(b.libraries) - Number(a.libraries))\n    );\n  }\n\n  if (loading) {\n    return <p>Загрузка...</p>;\n  }\n\n  return (\n    <div className=\"MainPageContainer\">\n      <div className=\"RadioButtons\">\n        <input\n          type=\"text\"\n          placeholder=\"Поиск по региону\"\n          onChange={e => setSearch(e.target.value)}\n        />\n        <p className=\"SortTitle\"><b>Сортировать</b></p>\n        <Radio.Group className=\"RadioGroup\" name=\"radiogroup\">\n          <Radio\n            value=\"option1\"\n            checked={sortOption === \"option1\"}\n            onClick={() => setSortOption(\"option1\")}\n            onChange={handleChangeRegionsDescend}\n          >по убыванию</Radio>\n          <Radio\n            value=\"option2\"\n            checked={sortOption === \"option2\"}\n            onClick={() => setSortOption(\"option2\")}\n            onChange={handleChangeRegionsAscend}\n          >по возрастанию</Radio>\n        </Radio.Group>\n      </div>\n      {filteredRegions.map((data, i) => (\n        <Item key={i} {...data} >\n\n        </Item>\n      ))}\n    </div>\n  );\n}\n\nexport default MainPage;\n","import React, {useEffect, useState} from 'react';\nimport '../ItemInfo/ItemInfo.css';\nimport {NavLink, useParams} from \"react-router-dom\";\nimport axios from \"axios\";\nimport {Button, Descriptions} from \"antd\";\n\n\nfunction ItemInfo() {\n  let {order} = useParams();\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n\n  useEffect(() => {\n    setLoading(true);\n    axios\n      .get(\"https://cors-anywhere.herokuapp.com/https://data.gov.ru/opendata/7705851331-statlibrary/data-20161110T1744.json\")\n      .then(res => {\n        setData(res.data);\n        setLoading(false);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }, []);\n\n  useEffect(() => {\n    setFilteredData(data.filter(function (item) {\n      return item.order === Number(order);\n    }));\n  }, [order, data]);\n\n\n  if (loading) {\n    return <p>Загрузка...</p>;\n  }\n\n  return (\n    <div className=\"ItemInfo\">\n      {filteredData.map((data, i) => (\n        <div key={i}>\n          <Descriptions\n            title={data.formname}\n            bordered\n            column={{xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1}}\n          >\n            <Descriptions.Item label=\"Регион\">{data.territory}</Descriptions.Item>\n            <Descriptions.Item label=\"Количество библиотек\">{data.libraries}</Descriptions.Item>\n            <Descriptions.Item label=\"Количество подписчиков\">{data.subscribers}</Descriptions.Item>\n            <Descriptions.Item label=\"Количество сотрудников\">{data.employees}</Descriptions.Item>\n            <Descriptions.Item label=\"Административная принадлежность\" span={2}>\n              {data.fullname}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Средства поступившие из бюджета\">{data.funds_budget} тыс. руб.</Descriptions.Item>\n            <Descriptions.Item label=\"Отремонтировано зданий\">{data.buildings_repair}</Descriptions.Item>\n            <Descriptions.Item label=\"Данные за период\">{data.period} г.</Descriptions.Item>\n            <Descriptions.Item label=\"Адрес\">\n              {data.address}\n            </Descriptions.Item>\n          </Descriptions>\n          <NavLink to=\"/\">\n            <Button id=\"BtnAddInfo\" type=\"primary\" size=\"default\">Назад</Button>\n          </NavLink>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default ItemInfo;\n\n","import React from 'react';\nimport {Layout} from 'antd';\nimport AppHeader from \"../Header/Header\";\nimport './App.css';\nimport MainPage from \"../MainPage/MainPage\";\nimport ItemInfo from \"../ItemInfo/ItemInfo\";\nimport {Route,Switch} from \"react-router-dom\";\n\nexport default function App() {\n  const {Header, Content, Footer} = Layout;\n\n  return (\n    <Layout style={{ minWidth: 461}}>\n      <Layout>\n        <Header className=\"site-layout-sub-header-background\" id=\"header\" style={{ padding: 0}}>\n             <AppHeader/>\n             </Header>\n        <Content style={{ margin: '24px 16px 0' }}>\n          <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360, minWidth: 445}}>\n            <Switch>\n              <Route exact path='/'\n                     render={() => <MainPage/>}/>\n              <Route path='/region-info/:order'\n                     render={() => <ItemInfo />}/>\n            </Switch>\n          </div>\n\n        </Content>\n        <Footer style={{ textAlign: 'center' }}>Sergey Klokov Test 2020</Footer>\n      </Layout>\n    </Layout>\n  )\n};\n\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ConfigProvider } from 'antd';\nimport {HashRouter} from 'react-router-dom';\nimport ruRU from 'antd/lib/locale-provider/ru_RU';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css';\n\n\nReactDOM.render(\n  <ConfigProvider locale={ruRU}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </ConfigProvider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}